"""
This file extract the feature occurrences for each feature present in database.
"""
import os
from collections import Counter
import csv

feature_vectors_dir = '../feature_vectors/'  # directory with features for all apps
csv_malware = "../sha256_family.csv"  # csv file with malware apps
features = {}  # dictionary for counting features in apps (malicious & benign)
malware = []  # list of malware
malware_features = {}  # dictionary for counting features in malicious apps
benign_features = {}  # dictionary for counting features in benign apps
not_assignable_feature_type = ['']  # found from extract_feature_types.py


def count_features_in_apps():
    print("Counting features present in apps...")
    for filename in os.listdir(feature_vectors_dir):  # read all apps
        with open(feature_vectors_dir + filename, "r") as file:  # open an app
            for line in file:  # read app line by line
                feature_type = line[:line.find('::')]  # extract feature type
                feature = line.strip()  # remove whitespace chars
                if feature_type not in not_assignable_feature_type:  # check if feature type is ''
                    # if a feature not present in dictionary append it as a key with a value of 1
                    if feature not in features:
                        features[feature] = 1
                    # if a feature present in dictionary update its value by one
                    else:
                        features[feature] += 1

    print("Total unique features: ", len(features))
    print("Total features: ", sum(features.values()))

    print("\n[+]Top 10 features present in apps:")
    top10_features = Counter(features).most_common(10)
    for i in top10_features:
        print(i[0], ":", i[1])

    # write a csv file with all feature occurrences
    sorted_features = sorted(features.items(), key=lambda kv: kv[1])
    write_features = csv.writer(open("features_counter.csv", "w"), delimiter=' ')
    for key, val in sorted_features:
        write_features.writerow([key, val])


def count_features_in_malware():
    print("\nCounting features in malware apps...")

    with open(csv_malware, 'r') as file:  # open malware csv file
        next(file)  # skip the header line
        reader = csv.reader(file, delimiter=',')  # read the csv
        for row in reader:
            malware.append(row[0])  # append every SHA name from the csv file into a list

    for filename in os.listdir(feature_vectors_dir):  # read all apps
        if filename in malware:  # if a filename present in malware
            with open(feature_vectors_dir + filename, "r") as file:  # open malware file
                for line in file:  # read malware line by line
                    feature_type = line[:line.find('::')]  # extract feature
                    feature = line.strip()  # remove whitespace chars
                    if feature_type not in not_assignable_feature_type:  # check if feature type is ''
                        # if a feature not present in dictionary append it as a key with a value
                        if feature not in malware_features:
                            malware_features[feature] = 1
                        # if a feature present in dictionary update its value by one
                        else:
                            malware_features[feature] += 1

    print("Total unique features present in malware: ", len(malware_features))
    print("Total features in malware: ", sum(malware_features.values()))

    print("\nTop 10 features present in malware:")
    top10_features_malware = Counter(malware_features).most_common(10)
    for i in top10_features_malware:
        print(i[0], ":", i[1])


def count_features_in_benign():
    print("\nCounting features in benign apps...")
    for filename in os.listdir(feature_vectors_dir):
        if filename not in malware:
            with open(feature_vectors_dir + filename, "r") as file:
                for line in file:
                    feature_type = line[:line.find('::')]
                    feature = line.strip()
                    if feature_type not in not_assignable_feature_type:
                        if feature not in benign_features:
                            benign_features[feature] = 1
                        else:
                            benign_features[feature] += 1

    print("Total unique features present in benign apps: ", len(malware_features))
    print("Total features in benign apps: ", sum(malware_features.values()))

    print("\nTop 10 features present in benign:")
    top10_features_benign = Counter(benign_features).most_common(10)
    for i in top10_features_benign:
        print(i[0], ":", i[1])


count_features_in_apps()
count_features_in_malware()
count_features_in_benign()

"""
Counting features present in apps...
Total unique features:  545333
Total features:  6113087

Top 10 features present in apps:
feature::android.hardware.touchscreen : 128702
intent::android.intent.action.MAIN : 125696
intent::android.intent.category.LAUNCHER : 123728
call::getSystemService : 109723
real_permission::android.permission.INTERNET : 108426
permission::android.permission.INTERNET : 108309
call::getPackageInfo : 73361
call::printStackTrace : 69675
permission::android.permission.ACCESS_NETWORK_STATE : 67487
real_permission::android.permission.ACCESS_NETWORK_STATE : 64800

Counting features in malware apps...
Total unique features present in malwares:  15590
Total features in malwares:  342794

Top 10 features present in malware:
feature::android.hardware.touchscreen : 5524
intent::android.intent.action.MAIN : 5351
permission::android.permission.INTERNET : 5323
intent::android.intent.category.LAUNCHER : 5224
call::getSystemService : 5185
real_permission::android.permission.INTERNET : 4992
permission::android.permission.READ_PHONE_STATE : 4931
real_permission::android.permission.READ_PHONE_STATE : 4186
call::getDeviceId : 3761
permission::android.permission.WRITE_EXTERNAL_STORAGE : 3713

Counting features in benign apps...
Total unique features present in benign apps:  15590
Total features in benign apps:  342794

Top 10 features present in benign:
feature::android.hardware.touchscreen : 123178
intent::android.intent.action.MAIN : 120345
intent::android.intent.category.LAUNCHER : 118504
call::getSystemService : 104538
real_permission::android.permission.INTERNET : 103434
permission::android.permission.INTERNET : 102986
call::getPackageInfo : 70604
call::printStackTrace : 65963
permission::android.permission.ACCESS_NETWORK_STATE : 63808
real_permission::android.permission.ACCESS_NETWORK_STATE : 61679
"""
