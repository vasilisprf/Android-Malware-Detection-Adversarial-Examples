import set_onehot_encoding as onehot
import models
import neural_network as NN
import numpy as np
import pickle
import keras.optimizers
from keras.models import load_model
import tensorflow as tf
import joblib


def create_random_sets():
    print("Generating TESTING set...")
    testing_set = onehot.generate_set(testing_set_size, malware_ratio)  # generate random testing set
    print("Generating TESTING input...")
    test_data, test_labels = onehot.generate_input(testing_set, total_features)  # perform one-hot encoding
    return test_data, test_labels


def create_train_set():
    training_set = []  # the list of training set

    with open("training_set_1500.txt", "r") as file:  # read training set file and append applications to list
        for line in file:
            line.strip()  # remove whitespace
            line = line[:-1]  # remove \n
            training_set.append(line)  # add item to list
    print("Generating TRAINING input...")
    data, labels = onehot.generate_input(training_set, total_features)  # perform one-hot encoding

    return data, labels


def create_test_set():
    testing_set = []  # the list of testing set

    with open("testing_set_1500.txt", "r") as file:  # read testing set file and append applications to list
        for line in file:
            line.strip()
            line = line[:-1]
            testing_set.append(line)

    print("Generating TESTING input...")
    test_data, test_labels = onehot.generate_input(testing_set, total_features)  # perform one-hot encoding
    return test_data, test_labels


def evaluate_models(runs):

    for i in range(runs):
        val_data, val_labels = create_random_sets()

        # loaded_model = load("models/model_GaussianNB.sav")
        # GNB.test_gaussian_naive_bayes_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_MultinomialNB.sav")
        # MNB.test_multi_naive_bayes_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_ComplementNB.sav")
        # CNB.test_complement_naive_bayes_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_BernoulliNB.sav")
        # BNB.test_bernoulli_naive_bayes_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_DecisionTreeClassifier.sav")
        # DT.test_decision_tree_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_RandomForestClassifier.sav")
        # RF.test_random_forest_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_LogisticRegression.sav")
        # LR.test_logistic_regression_classifier(loaded_model, val_data, val_labels)

        # loaded_model = load("models/model_SVC.sav")
        # SVM.test_svm_classifier(loaded_model, val_data, val_labels)

        loaded_model = load_model("models/best_model_DNN_Adam.h5")
        NN.test_neural_network(loaded_model, val_data, val_labels)


    # GNB.get_average_metrics(runs)
    # MNB.get_average_metrics(runs)
    # CNB.get_average_metrics(runs)
    # BNB.get_average_metrics(runs)
    # DT.get_average_metrics(runs)
    # RF.get_average_metrics(runs)
    # LR.get_average_metrics(runs)
    # SVM.get_average_metrics(runs)
    NN.get_average_metrics(runs)


def evaluate_on_test_set():
    val_data, val_labels = create_test_set()

    #loaded_model = load("models/model_GaussianNB.joblib")
    #GNB.test_gaussian_naive_bayes_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_MultinomialNB.joblib")
    #MNB.test_multi_naive_bayes_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_ComplementNB.joblib")
    #CNB.test_complement_naive_bayes_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_BernoulliNB.joblib")
    #BNB.test_bernoulli_naive_bayes_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_DecisionTreeClassifier.joblib")
    #DT.test_decision_tree_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_RandomForestClassifier.joblib")
    #RF.test_random_forest_classifier(loaded_model, val_data, val_labels)
    
    #loaded_model = load("models/KNearestNeighborsClassifier.joblib")
    #KNN.test_knn_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("models/model_LogisticRegression.joblib")
    #LR.test_logistic_regression_classifier(loaded_model, val_data, val_labels)

    #loaded_model = load("model_SVC.joblib")
    #SVM.test_svm_classifier(loaded_model, val_data, val_labels)

    loaded_model = load_model("models/best_model_DNN_Adam.h5")
    NN.test_neural_network(loaded_model, val_data, val_labels)   


if __name__ == "__main__":
    total_features = 545333  # total unique features
    testing_set_size = 1500  # set site that will be used to create random test set
    malware_ratio = 0.3  # malware ratio in the set size

    print("Creating data-labels...")
    onehot.create_list_of_apps()  # function from set_one_encoding.py

    # initialize sklearn models
    GNB = models.GaussianNaiveBayes()
    MNB = models.MultinomialNaiveBayes()
    CNB = models.ComplementNaiveBayes()
    BNB = models.BernoulliNaiveBayes()
    DT = models.DecisionTree()
    RF = models.RandomForest()
    KNN = models.KNearestNeighbors()
    LR = models.LogRegression()
    SVM = models.SupportVectorMachine()

    val_runs = 8

    #evaluate_models(val_runs)
    evaluate_on_test_set()
